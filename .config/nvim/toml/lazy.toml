# The best colorful flat theme for your favorite editor and terminal emulator.
[[plugins]]
repo = 'raphamorim/lucario'
on_event = ['VimEnter']
hook_add = '''
  syntax on
'''
hook_post_source = '''
  autocmd VimEnter * ++nested colorscheme lucario
'''

# # A light and configurable statusline/tabline plugin for Vim
[[plugins]]
repo = 'itchyny/lightline.vim'
on_event = ['ColorScheme']

# Rainbow Parentheses Improved, shorter code, no level limit, smooth and fast, powerful configuration.
[[plugins]]
repo = 'luochen1990/rainbow'
on_event = ['BufEnter']
hook_source = '''
  let g:rainbow_active = 1
'''

# Auto close parentheses and repeat by dot dot dot...
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = ['BufEnter']

# This plugin is used for displaying thin vertical lines at each indentation level for code indented with spaces.
[[plugins]]
repo = 'Yggdroot/indentLine'
on_event = ['BufEnter']

# Vim motion on speed!
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = ['BufEnter']

# This plugin causes all trailing whitespace characters (see Supported Whitespace Characters below) to be highlighted.
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_event = ['BufEnter']
hook_add = '''
  let g:strip_whitespace_on_save = 1
'''

# Defx is a dark powered plugin for Neovim/Vim to browse files. It replaces the deprecated vimfiler plugin.
[[plugins]]
repo = 'Shougo/defx.nvim'
on_map = ['<Leader>d']
hook_post_source = '''
  nnoremap <Leader>d :Defx<CR>
  autocmd FileType defx call s:defx_mappings()
  function! s:defx_mappings() abort
    " Ë°åÊï∞Ë°®Á§∫„ÇíÊ≠¢„ÇÅ„Çã
    set nonumber norelativenumber

    " „Ç´„Éº„ÇΩ„É´ÁßªÂãïÂë®„Çä
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> l defx#do_action('drop')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> gr defx#do_action('cd', [trim(system('git rev-parse --show-cdup'))])

    " „Ç®„Éá„Ç£„ÉÉ„ÉàÂë®„Çä
    nnoremap <silent><buffer><expr> <CR> defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop')
    nnoremap <silent><buffer><expr> o defx#is_directory() ? defx#do_action('open_or_close_tree') : defx#do_action('drop')
    nnoremap <silent><buffer><expr> E defx#do_action('drop', 'vsplit')

    " „Éï„Ç°„Ç§„É´Êìç‰Ωú
    nnoremap <silent><buffer><expr> c defx#do_action('copy')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> d defx#do_action('remove')
    nnoremap <silent><buffer><expr> K defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')

    " Ë°®Á§∫Âë®„Çä
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> C defx#do_action('toggle_columns', 'mark:indent:icon:filename:type:size:time')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> P defx#do_action('preview')
    nnoremap <silent><buffer><expr> <C-l> defx#do_action('redraw')
    nnoremap <silent><buffer><expr> <C-g> defx#do_action('print')

    " „Ç≥„Éû„É≥„ÉâÁ≠âÂÆüË°åÂë®„Çä
    nnoremap <silent><buffer><expr> !  defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> ; defx#do_action('repeat')

    " vimÈñ¢‰øÇÊìç‰Ωú„Åæ„Çè„Çä
    nnoremap <silent><buffer><expr> <C-c> defx#do_action('quit')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> cd defx#do_action('change_vim_cwd')
  endfunction
  call defx#custom#option('_', {
      \ 'show_ignored_files': 1,
      \ 'columns': 'mark:indent:icon:filename:type',
      \ 'auto_cd': 1,
      \ 'toggle': 1,
      \ 'split': 'vertical',
      \ 'winwidth': 30,
      \ 'direction': 'topleft',
      \ 'resume': 1,
      \ })
  call defx#custom#column('icon', {
      \ 'directory_icon': '‚ñ∏ ',
      \ 'opened_icon': '‚ñæ ',
      \ })
  call defx#custom#column('mark', {
      \ 'readonly_icon': '‚úó',
      \ 'selected_icon': '‚úì',
      \ })
'''

# fzf is a general-purpose command-line fuzzy finder.
[[plugins]]
repo = 'junegunn/fzf'
on_source = 'fzf.vim'
build = './install --bin'

# Things you can do with fzf and Vim.
[[plugins]]
repo = 'junegunn/fzf.vim'
on_map = ['<Leader>g', '<Leader>f', '<C-]>']
depends = 'fzf'
hook_post_source = '''
  command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
    \ 'rg --line-number --no-heading --color=always --smart-case --hidden --glob=!.git '.shellescape(<q-args>),
    \ 1,
    \ fzf#vim#with_preview({'options': ['--color=16']}, 'right:50%:wrap'),
    \ 0)
  nnoremap <silent><Leader>g :Rg<CR>
  nnoremap <silent><Leader>f :call fzf#vim#files(trim(system('git rev-parse --show-cdup')), fzf#vim#with_preview({'options': ['--color=16']}, 'right:50%:wrap'), 0)<CR>
  nnoremap <silent><C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
'''

# Async Language Server Protocol plugin for vim8 and neovim.
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_ft = [
  'sh', 'bash', # bash
  'cs',         # C#
  'dockerfile', # Dockerfile
  'go',         # Go
  'html',       # HTML
  'js',         # JavaScript
  'php',        # PHP
  'python',     # Python
  'ruby',       # Ruby
  'rust',       # Rust
  'sql',        # SQL
  'typescript', # TypeScript
  'vim',        # Vim
]

# Auto configurations for Language Servers for vim-lsp.
[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = ['vim-lsp']

# üëå Support for --remote and friends.
[[plugins]]
repo = 'mhinz/neovim-remote'
build = 'pip install -e .'
on_map = ['<Leader>tig']
hook_post_source = '''
  let $VISUAL     = "nvr --remote-wait"
  let $GIT_EDITOR = "nvr --remote-wait"
  autocmd FileType gitcommit,gitrebase,gitconfig set bufhidden=delete
  nnoremap <silent> <Leader>tig :<C-u>silent vsplit \| terminal tig status<CR>
'''

# Vim syntax for TOML.
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# Syntax file from http://www.vim.org/scripts/script.php?script_id=739
# NOTE: Vim7.4ÊôÇ‰ª£„ÅØyaml„ÅÆsyntax highlightÈÅÖ„Åã„Å£„Åü„Åë„Å©‰ªä„Å©„ÅÜ„Å™„ÅÆ„Åã„Çè„Åã„Çâ„Å™„ÅÑ
[[plugins]]
repo = 'stephpy/vim-yaml'
on_ft = ['yaml']

# markdown preview plugin for (neo)vim
[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
build = 'sh -c "cd app && yarn install"'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']

# A Filetype plugin for csv files
[[plugins]]
repo = 'chrisbra/csv.vim'
on_ft = ['csv']

# Dein.vim is a dark powered Vim/Neovim plugin manager.
[[plugins]]
repo = 'Shougo/dein.vim'
